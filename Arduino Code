#include <ESP8266WiFi.h>
#include <TimeLib.h>
#include <ArduinoJson.h>  
#include <WiFiClient.h> 
WiFiClient client;
#include<Adafruit_LEDBackpack.h>
#include<Adafruit_GFX.h>
#include<Wire.h>
#include <LiquidCrystal.h>
//User Settings
////////////////////
const char WIFI_SSID []    = "----------";//name of Wifi network
const char WIFI_PASSWORD [] = "----------";
const String CITY = "----------"; //name of city
const String COUNTRY = "--"; //2 digit country code (ISO 3166)
const String APIKEY = "--------------------------------"; //API Key from Open Weather Map
const String WTAPILocation = "America/Denver"; // your location listed at http://worldtimeapi.org/ for example America/Denver
const bool metric = false; //false:imperical(fahrenheit) true: metric(celcius)
const bool MDY = true; //true: month/date/year, false: date/month/year
const bool AMPM = true; //true: use 12 hour time with AM and PM, false: use 24 hour time
////////////////////
////////////////////
//JSON Variables
String dt_txt0,dt_txt1,dt_txt2,dt_txt3,dt_txt4,dt_txt5,dt_txt6,dt_txt7,dt_txt8,dt_txt9,dt_txt10,dt_txt11,dt_txt12,dt_txt13,dt_txt14,dt_txt15,dt_txt16,dt_txt17;
int dailyHigh;
int dailyLow;
String currentDescription;
int currentTemp;
String forecastDescription;

int page = 0;
int pressed = 0;
int sensorValue = 0;// variable to store the value coming from the sensor

int daysInMonth[] = {31,28,31,30,31,30,31,31,30,31,30,31};
char* months[] = {"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"};

int timeOffset;
int sensorPin = A0; // select the input pin
Adafruit_7segment matrix = Adafruit_7segment();
LiquidCrystal lcd(16, 2, 0, 15, 13, 12);
const String LOCATION = CITY + "," + COUNTRY;

int lastAPICall = 0;
int APIDelay = 600000;

void setup() {
  
  Serial.begin(115200);
  delay(500);
  
  //start display
  lcd.begin(16, 2);
  matrix.begin(0x70);

  //display loading sign
  lcd.clear();
  lcd.setCursor(3,0);
  lcd.print("Loading...");
  
  connectWifi();

  //get updated api information
  matrix.clear();
  updateAPIs();
}

void loop() {
  if(millis() - lastAPICall >= APIDelay && second() < 10){
    updateAPIs();
  }
  //Serial.println(second());
  //displayForecast();


  //Page Turner
  //pressed is a value stops the page from increating rapidly as the sensor is triggered.
  //0 means not pressed, 1 means pressed.

  sensorValue = analogRead (sensorPin);
  if (sensorValue <=800 and pressed == 0){
   lcd.clear();
   delay(200);
    page++;
    pressed= 1;
   
   }else if(sensorValue >= 700){
    pressed = 0;
   }else{
    delay(10);
   }
  
  //page Reset
  if (page == 2){
    page = 0;
  }

  if(page == 0){
    displayDateTime();
  }else if(page == 1 && (pressed == 1 || lastAPICall == 1000)){
    displayForecast();
  }



}

void connectWifi() {
  //connect to wifi
  
  WiFi.begin(WIFI_SSID, WIFI_PASSWORD);
  Serial.print("Connecting to ");
  Serial.println(WIFI_SSID);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("");
  Serial.println("WiFi connected!");
  Serial.println(WiFi.localIP());
  Serial.println();
}

String getForecast(){
  //retreives forecast weather data from open weather map api
  
  Serial.println("\nStarting connection to forecast api..."); 
  
  // Connect to open weather map api
  
  if (client.connect("api.openweathermap.org", 80)) { 
    Serial.println("connected to server"); 
    // Make a HTTP request: 
    client.print("GET /data/2.5/forecast?"); 
    client.print("q="+LOCATION); 
    client.print("&appid="+APIKEY); 
    client.print("&cnt=20"); 
    if(metric){
      client.println("&units=metric");
    }else{
      client.println("&units=imperial"); 
    }
    client.println("Host: api.openweathermap.org"); 
    client.println("Connection: close"); 
    client.println(); 
  } else { 
    Serial.println("unable to connect"); 
  } 
  delay(1000); 
  String line = ""; 

  //read, store, and return the forecast JSON string
 
  while (client.connected()) { 
    line = client.readStringUntil('\n');    
  } 
  return line;
} 


String getCurrentWeather(){
  //retreives current weather data from open weather map api
  
 Serial.println("\nStarting connection to current weather api..."); 
  
  // Connect to open weather map api
  
  if (client.connect("api.openweathermap.org", 80)) { 
    Serial.println("connected to server"); 
    // Make a HTTP request: 
    client.print("GET /data/2.5/weather?"); 
    client.print("q="+LOCATION); 
    client.print("&appid="+APIKEY); 
    if(metric){
      client.println("&units=metric");
    }else{
      client.println("&units=imperial"); 
    }
    client.println("Host: api.openweathermap.org"); 
    client.println("Connection: close"); 
    client.println(); 
  } else { 
    Serial.println("unable to connect"); 
  } 
  delay(1000); 
  String line = ""; 

  //read, store, and return the forecast JSON string
 
  while (client.connected()) { 
    line = client.readStringUntil('\n');    
  } 
  return line;
} 



void parseForecast(String json){
  //parses forecast weather JSON string and updates global variables
  
  const size_t bufferSize = 20*JSON_ARRAY_SIZE(1) + JSON_ARRAY_SIZE(20)
                            + 16*JSON_OBJECT_SIZE(0) + 55*JSON_OBJECT_SIZE(1)
                            + 21*JSON_OBJECT_SIZE(2) + 20*JSON_OBJECT_SIZE(4)
                            + 2*JSON_OBJECT_SIZE(5) + 2*JSON_OBJECT_SIZE(7)
                            + 25*JSON_OBJECT_SIZE(8) + 13*JSON_OBJECT_SIZE(9)
                            + 6460;
 
  DynamicJsonBuffer jsonBuffer(bufferSize);
  JsonObject& root = jsonBuffer.parseObject(json);
  if (!root.success()) { 
     Serial.println("parseObject() failed"); 
     return; 
  } 

  //assign data values global variables
  dailyHigh = root["list"][0]["main"]["temp"];
  dailyLow = root["list"][0]["main"]["temp"];
  
  for(int i = 0; i < 8; i ++){
    if(root["list"][i]["main"]["temp"] > dailyHigh){
      dailyHigh = root["list"][i]["main"]["temp"];
    }

    if(root["list"][i]["main"]["temp"] < dailyLow){
      dailyLow = root["list"][i]["main"]["temp"];
    }
  }
  const char* d = root["list"][1]["weather"][0]["description"];
  forecastDescription = d;
  Serial.println("describe: " + forecastDescription);
}

void parseCurrentWeather(String json){
  //parses current weather JSON string and updates global variables
  
  const size_t bufferSize = JSON_ARRAY_SIZE(1) + JSON_OBJECT_SIZE(1) +
                            JSON_OBJECT_SIZE(2) + JSON_OBJECT_SIZE(3) + 
                            JSON_OBJECT_SIZE(4) + JSON_OBJECT_SIZE(5) +
                            JSON_OBJECT_SIZE(6) + JSON_OBJECT_SIZE(12);

 
  DynamicJsonBuffer jsonBuffer(bufferSize);
  JsonObject& root = jsonBuffer.parseObject(json);
  if (!root.success()) { 
     Serial.println("parseObject() failed"); 
     return; 
  } 

  currentTemp = root["main"]["temp"];
  const char* description = root["weather"][0]["description"];
  currentDescription = description;
}


void updateTime(){
  //updates current time from world time api
  
 Serial.println("\nStarting connection to time api..."); 
  
  // Connect to world time api
  
  if (client.connect("worldtimeapi.org", 80)) { 
    Serial.println("connected to server"); 
    // Make a HTTP request:  
    client.print("GET /api/timezone/"); 
    client.print(WTAPILocation); 
    client.print(" HTTP/1.1\r\n");
    client.println("Host: worldtimeapi.org"); 
    client.println("Connection: close"); 
    client.println(); 
  } else { 
    Serial.println("unable to connect"); 
  } 
  delay(1000); 
  String line = ""; 

  //read and store the time JSON string
 
  while (client.connected()) { 
    line = client.readStringUntil('\n');    
  } 

  //parse the json string
  DynamicJsonBuffer jsonBuffer(JSON_OBJECT_SIZE(11));
  JsonObject& root = jsonBuffer.parseObject(line);

  int oldYear = year();

  //update time
  String t = root["unixtime"];
  String offset = root["utc_offset"];
  timeOffset = offset.substring(0,3).toInt();
  int updatedTime = t.toInt() + timeOffset * 3600 +3;
  setTime(updatedTime);

  //if the year changes, the days per month may if it is leapyear
  if(oldYear != year()){
    updateLeapYear();
  }
} 




void displayDateTime(){
  //displays current date on lcd and current time on 7 segment display
  
  //print data to LCD screen
  //clear previous data
  lcd.clear();
  matrix.clear();

  //write to lcd screen 

  //deal with am and pm on lcd display
  if(AMPMSign){
    //print AM or PM sign
    lcd.setCursor(7,0);
    if(hour() >= 12){
      lcd.print("PM");
    }else{
      lcd.print("AM");
    }

    //allows room for AM/PM sign by moving the date to 2nd row of lcd
    lcd.setCursor(3,1);
  }else{
    lcd.setCursor(3,0);
  }

  //display date data
  printDate();
  
  //print time to matrix
  if(AMPM && hour() > 12){
    matrix.writeDigitNum(1, hour()%10 -2);
  }else{
    matrix.writeDigitNum(0, hour()/10);
    matrix.writeDigitNum(1, hour()%10);
  }
  matrix.writeDigitNum(3, minute()/10);
  matrix.writeDigitNum(4, minute()%10);
  matrix.drawColon(true);

  //replace 0 with 12 for AMPM users
  if(AMPM && hour() == 0){
    matrix.writeDigitNum(0, 1);
    matrix.writeDigitNum(1, 2);
  }
  matrix.writeDisplay();
  delay(10);
}

void countdownClock(int h, int m, int d, int y){
  //takes in hour(24 hour time), month, date, and year
  //displays time left until that date
  int currentDate = totalDate(month(),day(),year());
  int countdownDate = totalDate(m, d, y);
  int daysLeft = countdownDate - currentDate -1;

  int hoursLeft;
  if (hour() > h){
    hoursLeft = 24 + h - hour() - 1;
  }else{
    hoursLeft = h - hour() - 1;
  }

  int minutesLeft = 59 - minute();
  int secondsLeft = 60 - second();

  
  Serial.println(String(daysLeft) + "." + String(hoursLeft) + "." + String(minutesLeft) + "." + String(secondsLeft));

  

}

void updateAPIs(){
  //update values associated with:
  //forecast weather
  //current weather
  //current time

  updateTime();
  String current = getCurrentWeather();
  parseCurrentWeather(current);
  String forecast = getForecast();
  parseForecast(forecast);
  Serial.println("APIs updated");
  lastAPICall = millis();
}

void updateLeapYear(){
  //changes number of days in february if this year is a leapyear
  if (year()%4  == 0) {
    if (year()%100 != 0) {
      daysInMonth[1] = 29;
    }
    else {
      if (year()%400 == 0) {
        daysInMonth[1] = 29;
      }
    }
  }  
}

int totalDate(int m, int d, int y){
  //takes in a month date and year
  //calculates and returns the number of days since the December 31 1999
  //1/1/2000 = 1
 int days = 0;
 for(int monthID = 1; monthID < m; monthID++){
   days += daysInMonth[monthID -1];
 }
 days += d;
 days += (y - 2000)*365;
 return days;
}

void displayForecast(){
  lcd.clear();
  matrix.clear();
  
  //print data to LCD screen
  lcd.print("   High | Low");
  lcd.setCursor(0,1);
  lcd.print(centerText(String(forecastDescription))); //description of weather in 3-6 hours
  matrix.writeDisplay();
  writeMatrix(dailyHigh, dailyLow);
 
  matrix.writeDisplay();
  delay(20);

}

void printDate(){
  //print month date and year based on preferances onto the lcd
  if(MDY){
    lcd.print(String(month()) + "/" + String(day()) + "/" + String(year()));
  }
  else
  {
    lcd.print(String(day()) + "/" + String(month()) + "/" + String(year()));
  }
}

void writeMatrix(int High, int Low){
  //take in high(first 2 digits) and low(last 2 digits) on 7 seg display
  
  //Low temperature displaying
  //matrix.clear();
  int LowAV= Low*(-1);
  int HighAV= High*(-1);
  if (Low < 0 and Low >- 10){ //Allow displaying numbers between 0 and -9
   
    matrix.writeDigitRaw(3,B01000000); //negative sign
    matrix.writeDigitNum(4,(LowAV / 1) %10);
    
  }else if (Low <= -10){
    matrix.writeDigitRaw(3,B00111000);//L
    matrix.writeDigitRaw(4,B00111111);//O
  }else if(Low >= 100){
    matrix.writeDigitRaw(3,B01110110);//H
    matrix.writeDigitRaw(4,B00110000);//I
  }else{
    matrix.writeDigitNum(3, (Low/10)%10);
    matrix.writeDigitNum(4, (Low/1)%10);
  }
  
  //High temperature Displaying
  if (High<0 and High>-10){
    
    matrix.writeDigitRaw(0,B01000000); //negative sign
    matrix.writeDigitNum(1,(HighAV / 1) %10);
    
  }else if (High <= -10){
    matrix.writeDigitRaw(0,B00111000);//L
    matrix.writeDigitRaw(1,B00111111);//O
  }else if(High >= 100){
    matrix.writeDigitRaw(0,B01110110);//H
    matrix.writeDigitRaw(1,B00110000);//I
  }else{
    matrix.writeDigitNum(0, (High/10)%10);
    matrix.writeDigitNum(1, (High/1)%10);
  } 
}


String centerText(String init){
  //takes in text string under 16 chars, adds spaces to center it in lcd, returns new string
  int available = 16 - init.length();
  for (int i = 0; i < (available/2); i ++){
    init = " " + init;
  }
  return init;
}
