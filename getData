#include <ESP8266WiFi.h>
#include <TimeLib.h>
#include <ArduinoJson.h>  
#include <WiFiClient.h> 
WiFiClient client;
#include<Adafruit_LEDBackpack.h>
#include<Adafruit_GFX.h>
#include<Wire.h>
#include <LiquidCrystal.h>
//User Settings
////////////////////
const char WIFI_SSID []    = "----------";//name of Wifi network
const char WIFI_PASSWORD [] = "----------";
const String CITY = "----------"; //name of city
const String COUNTRY = "--"; //2 digit country code (ISO 3166)
const String APIKEY = "--------------------------------"; //API Key from Open Weather Map
const String WTAPILocation = "America/Denver"; // your location listed at http://worldtimeapi.org/ for example America/Denver
const bool metric = false; //false:imperical(fahrenheit) true: metric(celcius)
const bool MDY = true; //true: month/date/year, false: date/month/year
const bool AMPM = true; //true: use 12 hour time with AM and PM, false: use 24 hour time
////////////////////
////////////////////
//JSON Variables
String dt_txt0,dt_txt1,dt_txt2,dt_txt3,dt_txt4,dt_txt5,dt_txt6,dt_txt7,dt_txt8,dt_txt9,dt_txt10,dt_txt11,dt_txt12,dt_txt13,dt_txt14,dt_txt15,dt_txt16,dt_txt17;

char* months[] = {"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"};

int timeOffset;
int sensorPin = A0; // select the input pin
Adafruit_7segment matrix = Adafruit_7segment();
LiquidCrystal lcd(16, 2, 0, 15, 13, 12);
const String LOCATION = CITY + "," + COUNTRY;

void setup() {
  
  Serial.begin(115200);
  delay(500);
  
  //start display
  lcd.begin(16, 2);
  matrix.begin(0x70);

  //display loading sign
  lcd.clear();
  lcd.setCursor(3,0);
  lcd.print("Loading...");
  
  connectWifi();

  //get updated api information
  updateTime();
  String current = getCurrentWeather();
  parseCurrentWeather(current);
  String forecast = getForecast();
  parseForecast(forecast);
}

void loop() {
  // put your main code here, to run repeatedly:
  
  //updateTime();
 // digitalClockDisplay();
  //String current = getCurrentWeather();
  //parseCurrentWeather(current);
  //String forecast = getForecast();
  //parseForecast(forecast);
  //digitalClockDisplay();
  
  displayDateTime();
  delay(100);
}

void connectWifi() {
  WiFi.begin(WIFI_SSID, WIFI_PASSWORD);
  Serial.print("Connecting to ");
  Serial.println(WIFI_SSID);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("");
  Serial.println("WiFi connected!");
  Serial.println(WiFi.localIP());
  Serial.println();
}

String getForecast(){
  Serial.println("\nStarting connection to forecast api..."); 
  
  // Connect to open weather map api
  
  if (client.connect("api.openweathermap.org", 80)) { 
    Serial.println("connected to server"); 
    // Make a HTTP request: 
    client.print("GET /data/2.5/forecast?"); 
    client.print("q="+LOCATION); 
    client.print("&appid="+APIKEY); 
    client.print("&cnt=20"); 
    if(metric){
      client.println("&units=metric");
    }else{
      client.println("&units=imperial"); 
    }
    client.println("Host: api.openweathermap.org"); 
    client.println("Connection: close"); 
    client.println(); 
  } else { 
    Serial.println("unable to connect"); 
  } 
  delay(1000); 
  String line = ""; 

  //read, store, and return the forecast JSON string
 
  while (client.connected()) { 
    line = client.readStringUntil('\n');    
  } 
  return line;
} 


String getCurrentWeather(){
 Serial.println("\nStarting connection to current weather api..."); 
  
  // Connect to open weather map api
  
  if (client.connect("api.openweathermap.org", 80)) { 
    Serial.println("connected to server"); 
    // Make a HTTP request: 
    client.print("GET /data/2.5/weather?"); 
    client.print("q="+LOCATION); 
    client.print("&appid="+APIKEY); 
    if(metric){
      client.println("&units=metric");
    }else{
      client.println("&units=imperial"); 
    }
    client.println("Host: api.openweathermap.org"); 
    client.println("Connection: close"); 
    client.println(); 
  } else { 
    Serial.println("unable to connect"); 
  } 
  delay(1000); 
  String line = ""; 

  //read, store, and return the forecast JSON string
 
  while (client.connected()) { 
    line = client.readStringUntil('\n');    
  } 
  return line;
} 



void parseForecast(String json){
  const size_t bufferSize = 20*JSON_ARRAY_SIZE(1) + JSON_ARRAY_SIZE(20)
                            + 16*JSON_OBJECT_SIZE(0) + 55*JSON_OBJECT_SIZE(1)
                            + 21*JSON_OBJECT_SIZE(2) + 20*JSON_OBJECT_SIZE(4)
                            + 2*JSON_OBJECT_SIZE(5) + 2*JSON_OBJECT_SIZE(7)
                            + 25*JSON_OBJECT_SIZE(8) + 13*JSON_OBJECT_SIZE(9)
                            + 6460;
 
  DynamicJsonBuffer jsonBuffer(bufferSize);
  JsonObject& root = jsonBuffer.parseObject(json);
  if (!root.success()) { 
     Serial.println("parseObject() failed"); 
     return; 
  } 

  //assign data values global variables
  String dt_txt0 = root["list"][0]["dt_txt"];
  String dt_txt1 = root["list"][1]["dt_txt"];
  String dt_txt2 = root["list"][2]["dt_txt"];
  String dt_txt3 = root["list"][3]["dt_txt"];
  String dt_txt4 = root["list"][4]["dt_txt"];
  String dt_txt5 = root["list"][5]["dt_txt"];
  String dt_txt6 = root["list"][6]["dt_txt"];
  String dt_txt7 = root["list"][7]["dt_txt"];
  String dt_txt8 = root["list"][8]["dt_txt"];
  String dt_txt9 = root["list"][9]["dt_txt"];
  String dt_txt10 = root["list"][10]["dt_txt"];
  String dt_txt11 = root["list"][11]["dt_txt"];
  String dt_txt12 = root["list"][12]["dt_txt"];
  String dt_txt13 = root["list"][13]["dt_txt"];
  String dt_txt14 = root["list"][14]["dt_txt"];
  String dt_txt15 = root["list"][15]["dt_txt"];
  String dt_txt16 = root["list"][16]["dt_txt"];
  String dt_txt17 = root["list"][17]["dt_txt"];
  //Serial.print(dt_txt0.substring(11,13));

  //
  int forecastsLeft = ((24 - dt_txt0.substring(11,13).toInt()+ timeOffset)/3);
  //if(DaylightSavings && 
  
  Serial.println("forecasts left: " + forecastsLeft);

  int maxTemp;
  int minTemp;
 // for (int i = 0; i < forecastsLeft; i ++){
    
 // }
  
  
  
}

void parseCurrentWeather(String json){
  const size_t bufferSize = JSON_ARRAY_SIZE(1) + JSON_OBJECT_SIZE(1) +
                            JSON_OBJECT_SIZE(2) + JSON_OBJECT_SIZE(3) + 
                            JSON_OBJECT_SIZE(4) + JSON_OBJECT_SIZE(5) +
                            JSON_OBJECT_SIZE(6) + JSON_OBJECT_SIZE(12);

 
  DynamicJsonBuffer jsonBuffer(bufferSize);
  JsonObject& root = jsonBuffer.parseObject(json);
  if (!root.success()) { 
     Serial.println("parseObject() failed"); 
     return; 
  } 
  
  //set the current time
 // String t = root["dt"];
 // Serial.print("T" + t);
 // setTime(t.toInt());
 // adjustTime(3600*timeOffset);
  
}


void updateTime(){
 Serial.println("\nStarting connection to time api..."); 
  
  // Connect to world time api
  
  if (client.connect("worldtimeapi.org", 80)) { 
    Serial.println("connected to server"); 
    // Make a HTTP request:  
    client.print("GET /api/timezone/"); 
    client.print(WTAPILocation); 
    client.print(" HTTP/1.1\r\n");
    client.println("Host: worldtimeapi.org"); 
    client.println("Connection: close"); 
    client.println(); 
  } else { 
    Serial.println("unable to connect"); 
  } 
  delay(1000); 
  String line = ""; 

  //read and store the time JSON string
 
  while (client.connected()) { 
    line = client.readStringUntil('\n');    
  } 

  //parse the json string
  DynamicJsonBuffer jsonBuffer(JSON_OBJECT_SIZE(11));
  JsonObject& root = jsonBuffer.parseObject(line);

  //update time
  String t = root["unixtime"];
  String offset = root["utc_offset"];
  timeOffset = offset.substring(0,3).toInt();
  int updatedTime = t.toInt() + timeOffset * 3600;
  setTime(updatedTime);
} 




void displayDateTime(){
  //print data to LCD screen
  //clear previous data
  lcd.clear();
  matrix.clear();

  //write to lcd screen 

  //deal with am and pm on lcd display
  if(AMPM){
    //print AM or PM sign
    lcd.setCursor(7,0);
    if(hour() >= 12){
      lcd.print("PM");
    }else{
      lcd.print("AM");
    }

    //allows room for AM/PM sign by moving the date to 2nd row of lcd
    lcd.setCursor(3,1);
  }else{
    lcd.setCursor(3,0);
  }

  //display date data
  if(MDY){
    lcd.print(String(month()) + "/" + String(day()) + "/" + String(year()));
  }
  else
  {
    lcd.print(String(day()) + "/" + String(month()) + "/" + String(year()));
  }
  
  //print time to matrix
  if(AMPM && hour() > 12){
    matrix.writeDigitNum(1, hour()%10 -2);
  }else{
    matrix.writeDigitNum(0, hour()/10);
    matrix.writeDigitNum(1, hour()%10);
  }
  matrix.writeDigitNum(3, minute()/10);
  matrix.writeDigitNum(4, minute()%10);
  matrix.drawColon(true);

  //replace 0 with 12 for AMPM users
  if(AMPM && hour() == 0){
    matrix.writeDigitNum(0, 1);
    matrix.writeDigitNum(1, 2);
  }
  matrix.writeDisplay();
  delay(10);
}
